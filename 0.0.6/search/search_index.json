{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#getting-started","title":"Getting Started","text":"<p>The LLQ SDK is a library designed to help developers interact seamlessly with the LeLabQuantique.com API.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install the LLQ SDK from PyPI using pip:</p> <pre><code>pip install llq-sdk\n</code></pre>"},{"location":"#api-key","title":"API Key","text":"<p>An API key is required for insertion operations. You can request an API key by creating an issue in the LLQ SDK repository: https://github.com/Le-Lab-Quantique/llq-sdk.</p>"},{"location":"#exemple","title":"Exemple","text":"<pre><code>from llq import GraphQLClient, PartnersQuery\n\nclient = GraphQLClient(endpoint_url=\"https://lelabquantique.com/graphql\")\nawait client.connect()\npartners = PartnersQuery()\npartners_query = partners.get(first=50)\nresponse = await client.execute(partners_query)\npartners_list = partners.parse(response)\nawait client.close()\n\nprint(partners_list)\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>llq<ul> <li>RestClient</li> <li>GraphQLClient</li> <li>post_job</li> <li>EventByStartDateQuery</li> <li>PartnerByIdQuery</li> <li>CustomTermsQuery</li> <li>PartnersQuery</li> <li>LoginMutation</li> <li>RefreshTokenMutation</li> <li>UpdateJobStatusMutation</li> <li>UpdateJobMutation</li> <li>DeleteJobMutation</li> </ul> </li> <li>llq.type<ul> <li>Nodes</li> <li>Node</li> <li>MediaItem</li> </ul> </li> <li>llq.queries<ul> <li>EventByStartDateQuery</li> <li>PartnerByIdQuery</li> <li>PartnersQuery</li> <li>CustomTermsQuery</li> </ul> </li> <li>llq.mutations<ul> <li>LoginMutation</li> <li>RefreshTokenMutation</li> <li>UpdateJobStatusMutation</li> <li>UpdateJobMutation</li> <li>DeleteJobMutation</li> </ul> </li> <li>llq.clients<ul> <li>GraphQLClient</li> <li>RestClient</li> </ul> </li> </ul>"},{"location":"reference/llq/CustomTermsQuery/","title":"CustomTermsQuery","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for job custom term GraphQL queries.</p> Source code in <code>llq/queries/job.py</code> <pre><code>class CustomTermsQuery(BaseOperationBuilder):\n    \"\"\"\n    A builder for job custom term GraphQL queries.\n    \"\"\"\n\n    def get(\n        self,\n        first: Optional[Int] = 1,\n    ) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL query to fetch contract-kinds.\n\n        :param contract_kind_count: The number of contract_kind to fetch.\n        :param job_mode_count: The number of job_mode to fetch.\n        :param occupation_kind_count: The number of occupation_kind to fetch.\n        :return: An sgqlc Operation object representing the query.\n        \"\"\"\n        op = Operation(RootQuery, name=\"get_job_custom_terms\")\n\n        contract_kinds = op.contractkinds(first=first)\n\n        modes = op.jobmodes(first=first)\n\n        occupation_kinds = op.occupationkinds(first=first)\n\n        contract_kinds_nodes = contract_kinds.nodes.__fragment__(\n            JobFragment().contract_kind_fragment()\n        )\n\n        job_modes_nodes = modes.nodes.__fragment__(JobFragment().job_mode_fragment())\n\n        occupation_kinds_nodes = occupation_kinds.nodes.__fragment__(\n            JobFragment().occupation_kind_fragment()\n        )\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; TermsResponse:\n        return TermsResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq/CustomTermsQuery/#llq.CustomTermsQuery.get","title":"<code>get(first=1)</code>","text":"<p>Build a GraphQL query to fetch contract-kinds.</p> <p>:param contract_kind_count: The number of contract_kind to fetch. :param job_mode_count: The number of job_mode to fetch. :param occupation_kind_count: The number of occupation_kind to fetch. :return: An sgqlc Operation object representing the query.</p> Source code in <code>llq/queries/job.py</code> <pre><code>def get(\n    self,\n    first: Optional[Int] = 1,\n) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL query to fetch contract-kinds.\n\n    :param contract_kind_count: The number of contract_kind to fetch.\n    :param job_mode_count: The number of job_mode to fetch.\n    :param occupation_kind_count: The number of occupation_kind to fetch.\n    :return: An sgqlc Operation object representing the query.\n    \"\"\"\n    op = Operation(RootQuery, name=\"get_job_custom_terms\")\n\n    contract_kinds = op.contractkinds(first=first)\n\n    modes = op.jobmodes(first=first)\n\n    occupation_kinds = op.occupationkinds(first=first)\n\n    contract_kinds_nodes = contract_kinds.nodes.__fragment__(\n        JobFragment().contract_kind_fragment()\n    )\n\n    job_modes_nodes = modes.nodes.__fragment__(JobFragment().job_mode_fragment())\n\n    occupation_kinds_nodes = occupation_kinds.nodes.__fragment__(\n        JobFragment().occupation_kind_fragment()\n    )\n\n    return op\n</code></pre>"},{"location":"reference/llq/DeleteJobMutation/","title":"DeleteJobMutation","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A Builder for job update status GraphQL mutation</p> Source code in <code>llq/mutations/job.py</code> <pre><code>class DeleteJobMutation(BaseOperationBuilder):\n    \"\"\"\n    A Builder for job update status GraphQL mutation\n    \"\"\"\n\n    def get(self, id: ID) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL mutation to update a job.\n\n        :param job_id: The ID of the job to update.\n        :return: An sgqlc Operation object representing the mutation.\n        \"\"\"\n\n        op = Operation(RootMutation, name=\"update_job_mutation\")\n        job = op.delete_job(\n            input={\n                \"id\": id,\n                \"ignore_edit_lock\": True,\n                \"force_delete\": True,\n            }\n        ).job\n        job.__fragment__(JobFragment().get())\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; DeleteJobMutationResponse:\n        return DeleteJobMutationResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq/DeleteJobMutation/#llq.DeleteJobMutation.get","title":"<code>get(id)</code>","text":"<p>Build a GraphQL mutation to update a job.</p> <p>:param job_id: The ID of the job to update. :return: An sgqlc Operation object representing the mutation.</p> Source code in <code>llq/mutations/job.py</code> <pre><code>def get(self, id: ID) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL mutation to update a job.\n\n    :param job_id: The ID of the job to update.\n    :return: An sgqlc Operation object representing the mutation.\n    \"\"\"\n\n    op = Operation(RootMutation, name=\"update_job_mutation\")\n    job = op.delete_job(\n        input={\n            \"id\": id,\n            \"ignore_edit_lock\": True,\n            \"force_delete\": True,\n        }\n    ).job\n    job.__fragment__(JobFragment().get())\n\n    return op\n</code></pre>"},{"location":"reference/llq/EventByStartDateQuery/","title":"EventByStartDateQuery","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for event-related GraphQL queries.</p> Source code in <code>llq/queries/event.py</code> <pre><code>class EventByStartDateQuery(BaseOperationBuilder):\n    \"\"\"\n    A builder for event-related GraphQL queries.\n    \"\"\"\n\n    def get(self, first: Int, date: DateQueryInput) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL query to fetch the next events.\n\n        :param first: The number of events to fetch.\n        :param start_date: The starting date for the events.\n        :return: An sgqlc Operation object representing the query.\n        \"\"\"\n        op = Operation(RootQuery, name=\"get_next_event\")\n\n        events = op.events(\n            first=first,\n            where={\n                \"date_query\": date,\n                \"order_by\": {\n                    \"field\": PostObjectsConnectionOrderbyEnum.DATE,\n                    \"order\": OrderEnum.ASC,\n                },\n            },\n        )\n\n        nodes = events.nodes\n\n        # Retrieve and attach the EventFragment from the registry\n        event_frag = EventFragment().get()\n        nodes.__fragment__(event_frag)\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; EventByStartDateResponse:\n        return EventByStartDateResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq/EventByStartDateQuery/#llq.EventByStartDateQuery.get","title":"<code>get(first, date)</code>","text":"<p>Build a GraphQL query to fetch the next events.</p> <p>:param first: The number of events to fetch. :param start_date: The starting date for the events. :return: An sgqlc Operation object representing the query.</p> Source code in <code>llq/queries/event.py</code> <pre><code>def get(self, first: Int, date: DateQueryInput) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL query to fetch the next events.\n\n    :param first: The number of events to fetch.\n    :param start_date: The starting date for the events.\n    :return: An sgqlc Operation object representing the query.\n    \"\"\"\n    op = Operation(RootQuery, name=\"get_next_event\")\n\n    events = op.events(\n        first=first,\n        where={\n            \"date_query\": date,\n            \"order_by\": {\n                \"field\": PostObjectsConnectionOrderbyEnum.DATE,\n                \"order\": OrderEnum.ASC,\n            },\n        },\n    )\n\n    nodes = events.nodes\n\n    # Retrieve and attach the EventFragment from the registry\n    event_frag = EventFragment().get()\n    nodes.__fragment__(event_frag)\n\n    return op\n</code></pre>"},{"location":"reference/llq/GraphQLClient/","title":"GraphQLClient","text":"<p>               Bases: <code>BaseClient</code></p> <p>A reusable asynchronous GraphQL client extending the BaseClient.</p> Source code in <code>llq/clients/graphql.py</code> <pre><code>class GraphQLClient(BaseClient):\n    \"\"\"\n    A reusable asynchronous GraphQL client extending the BaseClient.\n    \"\"\"\n\n    def __init__(self, endpoint_url: str, **kwargs):\n        super().__init__(**kwargs)\n        self.transport = AIOHTTPTransport(url=endpoint_url, headers=self.headers)\n        self.client = GqlClient(transport=self.transport)\n        self.session = None\n\n    async def connect(self):\n        self.session = await self.client.connect_async(reconnecting=True)\n\n    async def close(self):\n        if self.session:\n            await self.client.close_async()\n\n    async def execute(\n        self, operation: Operation, variables: Optional[dict] = None\n    ) -&gt; dict:\n        if not self.session:\n            raise ClientException(\"Client is not connected. Call 'connect()' first.\")\n\n        gql_operation = gql(str(operation))\n        response = await self.session.execute(gql_operation, variable_values=variables)\n        return to_snake_case(response)\n</code></pre>"},{"location":"reference/llq/LoginMutation/","title":"LoginMutation","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for login-related GraphQL mutation</p> Source code in <code>llq/mutations/auth.py</code> <pre><code>class LoginMutation(BaseOperationBuilder):\n    \"\"\"\n    A builder for login-related GraphQL mutation\n    \"\"\"\n\n    def get(self, input: LoginInput) -&gt; Operation:\n        op = Operation(RootMutation, name=\"login_user_mutation\")\n\n        user = op.login(input=input)\n\n        user.auth_token()\n        user.refresh_token()\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; \"LoginResponse\":\n        return LoginResponse.from_dict(data.get(\"login\", {}))\n</code></pre>"},{"location":"reference/llq/PartnerByIdQuery/","title":"PartnerByIdQuery","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for partner-related GraphQL queries.</p> Source code in <code>llq/queries/partner.py</code> <pre><code>class PartnerByIdQuery(BaseOperationBuilder):\n    \"\"\"\n    A builder for partner-related GraphQL queries.\n    \"\"\"\n\n    def get(self, id: ID) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL query to fetch a partner by id.\n\n        :param id: The ID of partner.\n        :return: An sgqlc Operation object representing the query.\n        \"\"\"\n        op = Operation(RootQuery, name=\"get_partner_by_id\")\n\n        partner = op.partner(id=id)\n        partner.id()\n\n        partner_acf = partner.partner_acf\n        partner_frag = PartnerFragment().get()\n        partner_acf.__fragment__(partner_frag)\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; PartnerByIdResponse:\n        return PartnerByIdResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq/PartnerByIdQuery/#llq.PartnerByIdQuery.get","title":"<code>get(id)</code>","text":"<p>Build a GraphQL query to fetch a partner by id.</p> <p>:param id: The ID of partner. :return: An sgqlc Operation object representing the query.</p> Source code in <code>llq/queries/partner.py</code> <pre><code>def get(self, id: ID) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL query to fetch a partner by id.\n\n    :param id: The ID of partner.\n    :return: An sgqlc Operation object representing the query.\n    \"\"\"\n    op = Operation(RootQuery, name=\"get_partner_by_id\")\n\n    partner = op.partner(id=id)\n    partner.id()\n\n    partner_acf = partner.partner_acf\n    partner_frag = PartnerFragment().get()\n    partner_acf.__fragment__(partner_frag)\n\n    return op\n</code></pre>"},{"location":"reference/llq/PartnersQuery/","title":"PartnersQuery","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for partners-related GraphQL queries.</p> Source code in <code>llq/queries/partner.py</code> <pre><code>class PartnersQuery(BaseOperationBuilder):\n    \"\"\"\n    A builder for partners-related GraphQL queries.\n    \"\"\"\n\n    def get(self, first: Int) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL query to fetch all partners.\n\n        :param first: The number of partners to fetch.\n        :return: An sgqlc Operation object representing the query.\n        \"\"\"\n\n        op = Operation(RootQuery, name=\"get_partners\")\n\n        partners = op.partners(first=first)\n\n        nodes = partners.nodes\n        nodes.id()\n        partner_node_frag = Fragment(Partner, \"PartnerNodeFragment\")\n        partner_acf = partner_node_frag.partner_acf\n\n        partner_acf_frag = PartnerFragment().get()\n        partner_acf.__fragment__(partner_acf_frag)\n\n        if partner_node_frag:\n            nodes.__fragment__(partner_node_frag)\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; PartnersResponse:\n        return PartnersResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq/PartnersQuery/#llq.PartnersQuery.get","title":"<code>get(first)</code>","text":"<p>Build a GraphQL query to fetch all partners.</p> <p>:param first: The number of partners to fetch. :return: An sgqlc Operation object representing the query.</p> Source code in <code>llq/queries/partner.py</code> <pre><code>def get(self, first: Int) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL query to fetch all partners.\n\n    :param first: The number of partners to fetch.\n    :return: An sgqlc Operation object representing the query.\n    \"\"\"\n\n    op = Operation(RootQuery, name=\"get_partners\")\n\n    partners = op.partners(first=first)\n\n    nodes = partners.nodes\n    nodes.id()\n    partner_node_frag = Fragment(Partner, \"PartnerNodeFragment\")\n    partner_acf = partner_node_frag.partner_acf\n\n    partner_acf_frag = PartnerFragment().get()\n    partner_acf.__fragment__(partner_acf_frag)\n\n    if partner_node_frag:\n        nodes.__fragment__(partner_node_frag)\n\n    return op\n</code></pre>"},{"location":"reference/llq/RefreshTokenMutation/","title":"RefreshTokenMutation","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for refresh-token-related GraphQL mutation</p> Source code in <code>llq/mutations/auth.py</code> <pre><code>class RefreshTokenMutation(BaseOperationBuilder):\n    \"\"\"\n    A builder for refresh-token-related GraphQL mutation\n    \"\"\"\n\n    def get(self, input: RefreshJwtAuthTokenInput) -&gt; Operation:\n        op = Operation(RootMutation, name=\"refresh_token_mutation\")\n\n        token = op.refresh_jwt_auth_token(input=input)\n\n        token.auth_token()\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; \"RefreshTokenResponse\":\n        return RefreshTokenResponse.from_dict(data.get(\"refreshJwtAuthToken\", {}))\n</code></pre>"},{"location":"reference/llq/RestClient/","title":"RestClient","text":"<p>               Bases: <code>BaseClient</code></p> <p>A reusable asynchronous REST client extending the BaseClient.</p> Source code in <code>llq/clients/rest.py</code> <pre><code>class RestClient(BaseClient):\n    \"\"\"\n    A reusable asynchronous REST client extending the BaseClient.\n    \"\"\"\n\n    def __init__(self, base_url: str, **kwargs):\n        super().__init__(**kwargs)\n        self.base_url = base_url.rstrip(\"/\")\n        self.session: Optional[aiohttp.ClientSession] = None\n\n    async def connect(self):\n        if not self.session:\n            self.session = aiohttp.ClientSession(headers=self.headers)\n\n    async def close(self):\n        if self.session:\n            await self.session.close()\n            self.session = None\n\n    async def request(self, method: str, endpoint: str, **kwargs) -&gt; dict:\n        if not self.session:\n            raise ClientException(\"Client is not connected. Call 'connect()' first.\")\n\n        url = f\"{self.base_url}/{endpoint.lstrip('/')}\"\n        self.log_request(method, url, **kwargs)\n\n        @self.retry_request\n        async def _make_request():\n            async with self.session.request(method, url, **kwargs) as response:\n                response.raise_for_status()\n                data = await response.json()\n                self.log_response(response.status, data)\n                return data\n\n        return await _make_request()\n\n    async def get(self, endpoint: str, params: Optional[Dict] = None) -&gt; dict:\n        return await self.request(\"GET\", endpoint, params=params)\n\n    async def post(\n        self, endpoint: str, data: Optional[Any] = None, json: Optional[Any] = None\n    ) -&gt; dict:\n        return await self.request(\"POST\", endpoint, data=data, json=json)\n\n    async def put(\n        self, endpoint: str, data: Optional[Any] = None, json: Optional[Any] = None\n    ) -&gt; dict:\n        return await self.request(\"PUT\", endpoint, data=data, json=json)\n\n    async def delete(self, endpoint: str, params: Optional[Dict] = None) -&gt; dict:\n        return await self.request(\"DELETE\", endpoint, params=params)\n</code></pre>"},{"location":"reference/llq/UpdateJobMutation/","title":"UpdateJobMutation","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for job update-related GraphQL mutation.</p> Source code in <code>llq/mutations/job.py</code> <pre><code>class UpdateJobMutation(BaseOperationBuilder):\n    \"\"\"\n    A builder for job update-related GraphQL mutation.\n    \"\"\"\n\n    def get(\n        self,\n        job_id: ID,\n        status: PostStatusEnum,\n        contract_kinds: JobContractkindsInput,\n        job_modes: JobJobmodesInput,\n        occupation_kinds: JobOccupationkindsInput,\n    ) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL mutation to update a job.\n\n        :param job_id: The ID of the job to update.\n        :param status: The status of the job.\n        :param contract_kinds: A dictionary defining contract kinds to update.\n        :param job_modes: A dictionary defining job modes to update.\n        :param occupation_kinds: A dictionary defining occupation kinds to update.\n        :return: An sgqlc Operation object representing the mutation.\n        \"\"\"\n        op = Operation(RootMutation, name=\"update_job_mutation\")\n        job = op.update_job(\n            input={\n                \"id\": job_id,\n                \"status\": status,\n                \"ignore_edit_lock\": True,\n                \"contractkinds\": contract_kinds,\n                \"jobmodes\": job_modes,\n                \"occupationkinds\": occupation_kinds,\n            }\n        ).job\n        job.__fragment__(JobFragment().get())\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; UpdateJobMutationResponse:\n        return UpdateJobMutationResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq/UpdateJobMutation/#llq.UpdateJobMutation.get","title":"<code>get(job_id, status, contract_kinds, job_modes, occupation_kinds)</code>","text":"<p>Build a GraphQL mutation to update a job.</p> <p>:param job_id: The ID of the job to update. :param status: The status of the job. :param contract_kinds: A dictionary defining contract kinds to update. :param job_modes: A dictionary defining job modes to update. :param occupation_kinds: A dictionary defining occupation kinds to update. :return: An sgqlc Operation object representing the mutation.</p> Source code in <code>llq/mutations/job.py</code> <pre><code>def get(\n    self,\n    job_id: ID,\n    status: PostStatusEnum,\n    contract_kinds: JobContractkindsInput,\n    job_modes: JobJobmodesInput,\n    occupation_kinds: JobOccupationkindsInput,\n) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL mutation to update a job.\n\n    :param job_id: The ID of the job to update.\n    :param status: The status of the job.\n    :param contract_kinds: A dictionary defining contract kinds to update.\n    :param job_modes: A dictionary defining job modes to update.\n    :param occupation_kinds: A dictionary defining occupation kinds to update.\n    :return: An sgqlc Operation object representing the mutation.\n    \"\"\"\n    op = Operation(RootMutation, name=\"update_job_mutation\")\n    job = op.update_job(\n        input={\n            \"id\": job_id,\n            \"status\": status,\n            \"ignore_edit_lock\": True,\n            \"contractkinds\": contract_kinds,\n            \"jobmodes\": job_modes,\n            \"occupationkinds\": occupation_kinds,\n        }\n    ).job\n    job.__fragment__(JobFragment().get())\n    return op\n</code></pre>"},{"location":"reference/llq/UpdateJobStatusMutation/","title":"UpdateJobStatusMutation","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A Builder for job update status GraphQL mutation</p> Source code in <code>llq/mutations/job.py</code> <pre><code>class UpdateJobStatusMutation(BaseOperationBuilder):\n    \"\"\"\n    A Builder for job update status GraphQL mutation\n    \"\"\"\n\n    def get(self, id: ID, status: PostStatusEnum) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL mutation to update a job.\n\n        :param job_id: The ID of the job to update.\n        :param status: The status of the job.\n        :return: An sgqlc Operation object representing the mutation.\n        \"\"\"\n        op = Operation(RootMutation, name=\"update_job_mutation\")\n        job = op.update_job(\n            input={\n                \"id\": id,\n                \"status\": status,\n                \"ignore_edit_lock\": True,\n            }\n        ).job\n        job.__fragment__(JobFragment().get())\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; UpdateJobStatusMutationResponse:\n        return UpdateJobStatusMutationResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq/UpdateJobStatusMutation/#llq.UpdateJobStatusMutation.get","title":"<code>get(id, status)</code>","text":"<p>Build a GraphQL mutation to update a job.</p> <p>:param job_id: The ID of the job to update. :param status: The status of the job. :return: An sgqlc Operation object representing the mutation.</p> Source code in <code>llq/mutations/job.py</code> <pre><code>def get(self, id: ID, status: PostStatusEnum) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL mutation to update a job.\n\n    :param job_id: The ID of the job to update.\n    :param status: The status of the job.\n    :return: An sgqlc Operation object representing the mutation.\n    \"\"\"\n    op = Operation(RootMutation, name=\"update_job_mutation\")\n    job = op.update_job(\n        input={\n            \"id\": id,\n            \"status\": status,\n            \"ignore_edit_lock\": True,\n        }\n    ).job\n    job.__fragment__(JobFragment().get())\n    return op\n</code></pre>"},{"location":"reference/llq/post_job/","title":"post_job","text":"Source code in <code>llq/rest_operations/job.py</code> <pre><code>async def post_job(job: CreateJobAcf, client: RestClient) -&gt; Dict:\n    job_post = {\n        \"title\": job.job_title_,\n        \"status\": PostStatusEnum.DRAFT.lower(),\n        \"slug\": str(uuid7()),\n        \"acf\": asdict(job),\n    }\n    return await client.post(\"/job\", json=job_post)\n</code></pre>"},{"location":"reference/llq.clients/GraphQLClient/","title":"GraphQLClient","text":"<p>               Bases: <code>BaseClient</code></p> <p>A reusable asynchronous GraphQL client extending the BaseClient.</p> Source code in <code>llq/clients/graphql.py</code> <pre><code>class GraphQLClient(BaseClient):\n    \"\"\"\n    A reusable asynchronous GraphQL client extending the BaseClient.\n    \"\"\"\n\n    def __init__(self, endpoint_url: str, **kwargs):\n        super().__init__(**kwargs)\n        self.transport = AIOHTTPTransport(url=endpoint_url, headers=self.headers)\n        self.client = GqlClient(transport=self.transport)\n        self.session = None\n\n    async def connect(self):\n        self.session = await self.client.connect_async(reconnecting=True)\n\n    async def close(self):\n        if self.session:\n            await self.client.close_async()\n\n    async def execute(\n        self, operation: Operation, variables: Optional[dict] = None\n    ) -&gt; dict:\n        if not self.session:\n            raise ClientException(\"Client is not connected. Call 'connect()' first.\")\n\n        gql_operation = gql(str(operation))\n        response = await self.session.execute(gql_operation, variable_values=variables)\n        return to_snake_case(response)\n</code></pre>"},{"location":"reference/llq.clients/RestClient/","title":"RestClient","text":"<p>               Bases: <code>BaseClient</code></p> <p>A reusable asynchronous REST client extending the BaseClient.</p> Source code in <code>llq/clients/rest.py</code> <pre><code>class RestClient(BaseClient):\n    \"\"\"\n    A reusable asynchronous REST client extending the BaseClient.\n    \"\"\"\n\n    def __init__(self, base_url: str, **kwargs):\n        super().__init__(**kwargs)\n        self.base_url = base_url.rstrip(\"/\")\n        self.session: Optional[aiohttp.ClientSession] = None\n\n    async def connect(self):\n        if not self.session:\n            self.session = aiohttp.ClientSession(headers=self.headers)\n\n    async def close(self):\n        if self.session:\n            await self.session.close()\n            self.session = None\n\n    async def request(self, method: str, endpoint: str, **kwargs) -&gt; dict:\n        if not self.session:\n            raise ClientException(\"Client is not connected. Call 'connect()' first.\")\n\n        url = f\"{self.base_url}/{endpoint.lstrip('/')}\"\n        self.log_request(method, url, **kwargs)\n\n        @self.retry_request\n        async def _make_request():\n            async with self.session.request(method, url, **kwargs) as response:\n                response.raise_for_status()\n                data = await response.json()\n                self.log_response(response.status, data)\n                return data\n\n        return await _make_request()\n\n    async def get(self, endpoint: str, params: Optional[Dict] = None) -&gt; dict:\n        return await self.request(\"GET\", endpoint, params=params)\n\n    async def post(\n        self, endpoint: str, data: Optional[Any] = None, json: Optional[Any] = None\n    ) -&gt; dict:\n        return await self.request(\"POST\", endpoint, data=data, json=json)\n\n    async def put(\n        self, endpoint: str, data: Optional[Any] = None, json: Optional[Any] = None\n    ) -&gt; dict:\n        return await self.request(\"PUT\", endpoint, data=data, json=json)\n\n    async def delete(self, endpoint: str, params: Optional[Dict] = None) -&gt; dict:\n        return await self.request(\"DELETE\", endpoint, params=params)\n</code></pre>"},{"location":"reference/llq.mutations/DeleteJobMutation/","title":"DeleteJobMutation","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A Builder for job update status GraphQL mutation</p> Source code in <code>llq/mutations/job.py</code> <pre><code>class DeleteJobMutation(BaseOperationBuilder):\n    \"\"\"\n    A Builder for job update status GraphQL mutation\n    \"\"\"\n\n    def get(self, id: ID) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL mutation to update a job.\n\n        :param job_id: The ID of the job to update.\n        :return: An sgqlc Operation object representing the mutation.\n        \"\"\"\n\n        op = Operation(RootMutation, name=\"update_job_mutation\")\n        job = op.delete_job(\n            input={\n                \"id\": id,\n                \"ignore_edit_lock\": True,\n                \"force_delete\": True,\n            }\n        ).job\n        job.__fragment__(JobFragment().get())\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; DeleteJobMutationResponse:\n        return DeleteJobMutationResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq.mutations/DeleteJobMutation/#llq.mutations.DeleteJobMutation.get","title":"<code>get(id)</code>","text":"<p>Build a GraphQL mutation to update a job.</p> <p>:param job_id: The ID of the job to update. :return: An sgqlc Operation object representing the mutation.</p> Source code in <code>llq/mutations/job.py</code> <pre><code>def get(self, id: ID) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL mutation to update a job.\n\n    :param job_id: The ID of the job to update.\n    :return: An sgqlc Operation object representing the mutation.\n    \"\"\"\n\n    op = Operation(RootMutation, name=\"update_job_mutation\")\n    job = op.delete_job(\n        input={\n            \"id\": id,\n            \"ignore_edit_lock\": True,\n            \"force_delete\": True,\n        }\n    ).job\n    job.__fragment__(JobFragment().get())\n\n    return op\n</code></pre>"},{"location":"reference/llq.mutations/LoginMutation/","title":"LoginMutation","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for login-related GraphQL mutation</p> Source code in <code>llq/mutations/auth.py</code> <pre><code>class LoginMutation(BaseOperationBuilder):\n    \"\"\"\n    A builder for login-related GraphQL mutation\n    \"\"\"\n\n    def get(self, input: LoginInput) -&gt; Operation:\n        op = Operation(RootMutation, name=\"login_user_mutation\")\n\n        user = op.login(input=input)\n\n        user.auth_token()\n        user.refresh_token()\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; \"LoginResponse\":\n        return LoginResponse.from_dict(data.get(\"login\", {}))\n</code></pre>"},{"location":"reference/llq.mutations/RefreshTokenMutation/","title":"RefreshTokenMutation","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for refresh-token-related GraphQL mutation</p> Source code in <code>llq/mutations/auth.py</code> <pre><code>class RefreshTokenMutation(BaseOperationBuilder):\n    \"\"\"\n    A builder for refresh-token-related GraphQL mutation\n    \"\"\"\n\n    def get(self, input: RefreshJwtAuthTokenInput) -&gt; Operation:\n        op = Operation(RootMutation, name=\"refresh_token_mutation\")\n\n        token = op.refresh_jwt_auth_token(input=input)\n\n        token.auth_token()\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; \"RefreshTokenResponse\":\n        return RefreshTokenResponse.from_dict(data.get(\"refreshJwtAuthToken\", {}))\n</code></pre>"},{"location":"reference/llq.mutations/UpdateJobMutation/","title":"UpdateJobMutation","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for job update-related GraphQL mutation.</p> Source code in <code>llq/mutations/job.py</code> <pre><code>class UpdateJobMutation(BaseOperationBuilder):\n    \"\"\"\n    A builder for job update-related GraphQL mutation.\n    \"\"\"\n\n    def get(\n        self,\n        job_id: ID,\n        status: PostStatusEnum,\n        contract_kinds: JobContractkindsInput,\n        job_modes: JobJobmodesInput,\n        occupation_kinds: JobOccupationkindsInput,\n    ) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL mutation to update a job.\n\n        :param job_id: The ID of the job to update.\n        :param status: The status of the job.\n        :param contract_kinds: A dictionary defining contract kinds to update.\n        :param job_modes: A dictionary defining job modes to update.\n        :param occupation_kinds: A dictionary defining occupation kinds to update.\n        :return: An sgqlc Operation object representing the mutation.\n        \"\"\"\n        op = Operation(RootMutation, name=\"update_job_mutation\")\n        job = op.update_job(\n            input={\n                \"id\": job_id,\n                \"status\": status,\n                \"ignore_edit_lock\": True,\n                \"contractkinds\": contract_kinds,\n                \"jobmodes\": job_modes,\n                \"occupationkinds\": occupation_kinds,\n            }\n        ).job\n        job.__fragment__(JobFragment().get())\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; UpdateJobMutationResponse:\n        return UpdateJobMutationResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq.mutations/UpdateJobMutation/#llq.mutations.UpdateJobMutation.get","title":"<code>get(job_id, status, contract_kinds, job_modes, occupation_kinds)</code>","text":"<p>Build a GraphQL mutation to update a job.</p> <p>:param job_id: The ID of the job to update. :param status: The status of the job. :param contract_kinds: A dictionary defining contract kinds to update. :param job_modes: A dictionary defining job modes to update. :param occupation_kinds: A dictionary defining occupation kinds to update. :return: An sgqlc Operation object representing the mutation.</p> Source code in <code>llq/mutations/job.py</code> <pre><code>def get(\n    self,\n    job_id: ID,\n    status: PostStatusEnum,\n    contract_kinds: JobContractkindsInput,\n    job_modes: JobJobmodesInput,\n    occupation_kinds: JobOccupationkindsInput,\n) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL mutation to update a job.\n\n    :param job_id: The ID of the job to update.\n    :param status: The status of the job.\n    :param contract_kinds: A dictionary defining contract kinds to update.\n    :param job_modes: A dictionary defining job modes to update.\n    :param occupation_kinds: A dictionary defining occupation kinds to update.\n    :return: An sgqlc Operation object representing the mutation.\n    \"\"\"\n    op = Operation(RootMutation, name=\"update_job_mutation\")\n    job = op.update_job(\n        input={\n            \"id\": job_id,\n            \"status\": status,\n            \"ignore_edit_lock\": True,\n            \"contractkinds\": contract_kinds,\n            \"jobmodes\": job_modes,\n            \"occupationkinds\": occupation_kinds,\n        }\n    ).job\n    job.__fragment__(JobFragment().get())\n    return op\n</code></pre>"},{"location":"reference/llq.mutations/UpdateJobStatusMutation/","title":"UpdateJobStatusMutation","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A Builder for job update status GraphQL mutation</p> Source code in <code>llq/mutations/job.py</code> <pre><code>class UpdateJobStatusMutation(BaseOperationBuilder):\n    \"\"\"\n    A Builder for job update status GraphQL mutation\n    \"\"\"\n\n    def get(self, id: ID, status: PostStatusEnum) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL mutation to update a job.\n\n        :param job_id: The ID of the job to update.\n        :param status: The status of the job.\n        :return: An sgqlc Operation object representing the mutation.\n        \"\"\"\n        op = Operation(RootMutation, name=\"update_job_mutation\")\n        job = op.update_job(\n            input={\n                \"id\": id,\n                \"status\": status,\n                \"ignore_edit_lock\": True,\n            }\n        ).job\n        job.__fragment__(JobFragment().get())\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; UpdateJobStatusMutationResponse:\n        return UpdateJobStatusMutationResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq.mutations/UpdateJobStatusMutation/#llq.mutations.UpdateJobStatusMutation.get","title":"<code>get(id, status)</code>","text":"<p>Build a GraphQL mutation to update a job.</p> <p>:param job_id: The ID of the job to update. :param status: The status of the job. :return: An sgqlc Operation object representing the mutation.</p> Source code in <code>llq/mutations/job.py</code> <pre><code>def get(self, id: ID, status: PostStatusEnum) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL mutation to update a job.\n\n    :param job_id: The ID of the job to update.\n    :param status: The status of the job.\n    :return: An sgqlc Operation object representing the mutation.\n    \"\"\"\n    op = Operation(RootMutation, name=\"update_job_mutation\")\n    job = op.update_job(\n        input={\n            \"id\": id,\n            \"status\": status,\n            \"ignore_edit_lock\": True,\n        }\n    ).job\n    job.__fragment__(JobFragment().get())\n    return op\n</code></pre>"},{"location":"reference/llq.queries/CustomTermsQuery/","title":"CustomTermsQuery","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for job custom term GraphQL queries.</p> Source code in <code>llq/queries/job.py</code> <pre><code>class CustomTermsQuery(BaseOperationBuilder):\n    \"\"\"\n    A builder for job custom term GraphQL queries.\n    \"\"\"\n\n    def get(\n        self,\n        first: Optional[Int] = 1,\n    ) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL query to fetch contract-kinds.\n\n        :param contract_kind_count: The number of contract_kind to fetch.\n        :param job_mode_count: The number of job_mode to fetch.\n        :param occupation_kind_count: The number of occupation_kind to fetch.\n        :return: An sgqlc Operation object representing the query.\n        \"\"\"\n        op = Operation(RootQuery, name=\"get_job_custom_terms\")\n\n        contract_kinds = op.contractkinds(first=first)\n\n        modes = op.jobmodes(first=first)\n\n        occupation_kinds = op.occupationkinds(first=first)\n\n        contract_kinds_nodes = contract_kinds.nodes.__fragment__(\n            JobFragment().contract_kind_fragment()\n        )\n\n        job_modes_nodes = modes.nodes.__fragment__(JobFragment().job_mode_fragment())\n\n        occupation_kinds_nodes = occupation_kinds.nodes.__fragment__(\n            JobFragment().occupation_kind_fragment()\n        )\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; TermsResponse:\n        return TermsResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq.queries/CustomTermsQuery/#llq.queries.CustomTermsQuery.get","title":"<code>get(first=1)</code>","text":"<p>Build a GraphQL query to fetch contract-kinds.</p> <p>:param contract_kind_count: The number of contract_kind to fetch. :param job_mode_count: The number of job_mode to fetch. :param occupation_kind_count: The number of occupation_kind to fetch. :return: An sgqlc Operation object representing the query.</p> Source code in <code>llq/queries/job.py</code> <pre><code>def get(\n    self,\n    first: Optional[Int] = 1,\n) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL query to fetch contract-kinds.\n\n    :param contract_kind_count: The number of contract_kind to fetch.\n    :param job_mode_count: The number of job_mode to fetch.\n    :param occupation_kind_count: The number of occupation_kind to fetch.\n    :return: An sgqlc Operation object representing the query.\n    \"\"\"\n    op = Operation(RootQuery, name=\"get_job_custom_terms\")\n\n    contract_kinds = op.contractkinds(first=first)\n\n    modes = op.jobmodes(first=first)\n\n    occupation_kinds = op.occupationkinds(first=first)\n\n    contract_kinds_nodes = contract_kinds.nodes.__fragment__(\n        JobFragment().contract_kind_fragment()\n    )\n\n    job_modes_nodes = modes.nodes.__fragment__(JobFragment().job_mode_fragment())\n\n    occupation_kinds_nodes = occupation_kinds.nodes.__fragment__(\n        JobFragment().occupation_kind_fragment()\n    )\n\n    return op\n</code></pre>"},{"location":"reference/llq.queries/EventByStartDateQuery/","title":"EventByStartDateQuery","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for event-related GraphQL queries.</p> Source code in <code>llq/queries/event.py</code> <pre><code>class EventByStartDateQuery(BaseOperationBuilder):\n    \"\"\"\n    A builder for event-related GraphQL queries.\n    \"\"\"\n\n    def get(self, first: Int, date: DateQueryInput) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL query to fetch the next events.\n\n        :param first: The number of events to fetch.\n        :param start_date: The starting date for the events.\n        :return: An sgqlc Operation object representing the query.\n        \"\"\"\n        op = Operation(RootQuery, name=\"get_next_event\")\n\n        events = op.events(\n            first=first,\n            where={\n                \"date_query\": date,\n                \"order_by\": {\n                    \"field\": PostObjectsConnectionOrderbyEnum.DATE,\n                    \"order\": OrderEnum.ASC,\n                },\n            },\n        )\n\n        nodes = events.nodes\n\n        # Retrieve and attach the EventFragment from the registry\n        event_frag = EventFragment().get()\n        nodes.__fragment__(event_frag)\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; EventByStartDateResponse:\n        return EventByStartDateResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq.queries/EventByStartDateQuery/#llq.queries.EventByStartDateQuery.get","title":"<code>get(first, date)</code>","text":"<p>Build a GraphQL query to fetch the next events.</p> <p>:param first: The number of events to fetch. :param start_date: The starting date for the events. :return: An sgqlc Operation object representing the query.</p> Source code in <code>llq/queries/event.py</code> <pre><code>def get(self, first: Int, date: DateQueryInput) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL query to fetch the next events.\n\n    :param first: The number of events to fetch.\n    :param start_date: The starting date for the events.\n    :return: An sgqlc Operation object representing the query.\n    \"\"\"\n    op = Operation(RootQuery, name=\"get_next_event\")\n\n    events = op.events(\n        first=first,\n        where={\n            \"date_query\": date,\n            \"order_by\": {\n                \"field\": PostObjectsConnectionOrderbyEnum.DATE,\n                \"order\": OrderEnum.ASC,\n            },\n        },\n    )\n\n    nodes = events.nodes\n\n    # Retrieve and attach the EventFragment from the registry\n    event_frag = EventFragment().get()\n    nodes.__fragment__(event_frag)\n\n    return op\n</code></pre>"},{"location":"reference/llq.queries/PartnerByIdQuery/","title":"PartnerByIdQuery","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for partner-related GraphQL queries.</p> Source code in <code>llq/queries/partner.py</code> <pre><code>class PartnerByIdQuery(BaseOperationBuilder):\n    \"\"\"\n    A builder for partner-related GraphQL queries.\n    \"\"\"\n\n    def get(self, id: ID) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL query to fetch a partner by id.\n\n        :param id: The ID of partner.\n        :return: An sgqlc Operation object representing the query.\n        \"\"\"\n        op = Operation(RootQuery, name=\"get_partner_by_id\")\n\n        partner = op.partner(id=id)\n        partner.id()\n\n        partner_acf = partner.partner_acf\n        partner_frag = PartnerFragment().get()\n        partner_acf.__fragment__(partner_frag)\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; PartnerByIdResponse:\n        return PartnerByIdResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq.queries/PartnerByIdQuery/#llq.queries.PartnerByIdQuery.get","title":"<code>get(id)</code>","text":"<p>Build a GraphQL query to fetch a partner by id.</p> <p>:param id: The ID of partner. :return: An sgqlc Operation object representing the query.</p> Source code in <code>llq/queries/partner.py</code> <pre><code>def get(self, id: ID) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL query to fetch a partner by id.\n\n    :param id: The ID of partner.\n    :return: An sgqlc Operation object representing the query.\n    \"\"\"\n    op = Operation(RootQuery, name=\"get_partner_by_id\")\n\n    partner = op.partner(id=id)\n    partner.id()\n\n    partner_acf = partner.partner_acf\n    partner_frag = PartnerFragment().get()\n    partner_acf.__fragment__(partner_frag)\n\n    return op\n</code></pre>"},{"location":"reference/llq.queries/PartnersQuery/","title":"PartnersQuery","text":"<p>               Bases: <code>BaseOperationBuilder</code></p> <p>A builder for partners-related GraphQL queries.</p> Source code in <code>llq/queries/partner.py</code> <pre><code>class PartnersQuery(BaseOperationBuilder):\n    \"\"\"\n    A builder for partners-related GraphQL queries.\n    \"\"\"\n\n    def get(self, first: Int) -&gt; Operation:\n        \"\"\"\n        Build a GraphQL query to fetch all partners.\n\n        :param first: The number of partners to fetch.\n        :return: An sgqlc Operation object representing the query.\n        \"\"\"\n\n        op = Operation(RootQuery, name=\"get_partners\")\n\n        partners = op.partners(first=first)\n\n        nodes = partners.nodes\n        nodes.id()\n        partner_node_frag = Fragment(Partner, \"PartnerNodeFragment\")\n        partner_acf = partner_node_frag.partner_acf\n\n        partner_acf_frag = PartnerFragment().get()\n        partner_acf.__fragment__(partner_acf_frag)\n\n        if partner_node_frag:\n            nodes.__fragment__(partner_node_frag)\n\n        return op\n\n    @staticmethod\n    def parse(data: dict) -&gt; PartnersResponse:\n        return PartnersResponse.from_dict(data)\n</code></pre>"},{"location":"reference/llq.queries/PartnersQuery/#llq.queries.PartnersQuery.get","title":"<code>get(first)</code>","text":"<p>Build a GraphQL query to fetch all partners.</p> <p>:param first: The number of partners to fetch. :return: An sgqlc Operation object representing the query.</p> Source code in <code>llq/queries/partner.py</code> <pre><code>def get(self, first: Int) -&gt; Operation:\n    \"\"\"\n    Build a GraphQL query to fetch all partners.\n\n    :param first: The number of partners to fetch.\n    :return: An sgqlc Operation object representing the query.\n    \"\"\"\n\n    op = Operation(RootQuery, name=\"get_partners\")\n\n    partners = op.partners(first=first)\n\n    nodes = partners.nodes\n    nodes.id()\n    partner_node_frag = Fragment(Partner, \"PartnerNodeFragment\")\n    partner_acf = partner_node_frag.partner_acf\n\n    partner_acf_frag = PartnerFragment().get()\n    partner_acf.__fragment__(partner_acf_frag)\n\n    if partner_node_frag:\n        nodes.__fragment__(partner_node_frag)\n\n    return op\n</code></pre>"},{"location":"reference/llq.type/MediaItem/","title":"MediaItem","text":"Source code in <code>llq/type/common.py</code> <pre><code>@dataclass\nclass MediaItem:\n    uri: str\n    source_url: Optional[str]\n    alt_text: Optional[str]\n    database_id: int\n    media_item_url: str\n</code></pre>"},{"location":"reference/llq.type/Node/","title":"Node","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Class to represent a single node.</p> Source code in <code>llq/type/node.py</code> <pre><code>@dataclass\nclass Node(Generic[T]):\n    \"\"\"\n    Class to represent a single node.\n    \"\"\"\n\n    node: T\n\n    @staticmethod\n    def from_dict(data: dict, item_type: Type[T]) -&gt; \"Node[T]\":\n        \"\"\"\n        Parse a dictionary into a single Node instance of type T.\n        \"\"\"\n        return Node(node=_parse_dict(data.get(\"node\", {}), item_type))\n</code></pre>"},{"location":"reference/llq.type/Node/#llq.type.Node.from_dict","title":"<code>from_dict(data, item_type)</code>  <code>staticmethod</code>","text":"<p>Parse a dictionary into a single Node instance of type T.</p> Source code in <code>llq/type/node.py</code> <pre><code>@staticmethod\ndef from_dict(data: dict, item_type: Type[T]) -&gt; \"Node[T]\":\n    \"\"\"\n    Parse a dictionary into a single Node instance of type T.\n    \"\"\"\n    return Node(node=_parse_dict(data.get(\"node\", {}), item_type))\n</code></pre>"},{"location":"reference/llq.type/Nodes/","title":"Nodes","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Class to represent multiple nodes.</p> Source code in <code>llq/type/node.py</code> <pre><code>@dataclass\nclass Nodes(Generic[T]):\n    \"\"\"\n    Class to represent multiple nodes.\n    \"\"\"\n\n    nodes: List[T]\n\n    @staticmethod\n    def from_dict(data: dict, item_type: Type[T]) -&gt; \"Nodes[T]\":\n        \"\"\"\n        Parse a dictionary into a Nodes instance containing a list of items of type T.\n        \"\"\"\n        return Nodes(nodes=_parse_dict(data.get(\"nodes\", []), item_type))\n</code></pre>"},{"location":"reference/llq.type/Nodes/#llq.type.Nodes.from_dict","title":"<code>from_dict(data, item_type)</code>  <code>staticmethod</code>","text":"<p>Parse a dictionary into a Nodes instance containing a list of items of type T.</p> Source code in <code>llq/type/node.py</code> <pre><code>@staticmethod\ndef from_dict(data: dict, item_type: Type[T]) -&gt; \"Nodes[T]\":\n    \"\"\"\n    Parse a dictionary into a Nodes instance containing a list of items of type T.\n    \"\"\"\n    return Nodes(nodes=_parse_dict(data.get(\"nodes\", []), item_type))\n</code></pre>"}]}